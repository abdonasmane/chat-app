stages:
    - backend-lint
    - backend-test
    - frontend-lint
    - frontend-test
    - deploy

lint-js: 
  stage: backend-lint
  tags:
    - docker
  image: node
  script:
    - cd backend
    - npm i
    - npx eslint src/routes/*.js src/models/*.js src/controllers/*.js > ../lintes_report.txt
  artifacts:
    when: always
    paths:
      - lintes_report.txt
  allow_failure: false

super-test:
  stage: backend-test
  tags:
    - docker
  image: node
  script:
    - cd backend
    - npm i
    - npm run doc
    - npm run test > ../testCover_report.txt
  artifacts:
    when: always
    paths:
      - testCover_report.txt
  allow_failure: false

semgrep:
  stage: backend-test
  image: semgrep/semgrep
  script: 
    - cd backend/src
    - semgrep ci > ../../testSecurity_report.txt
  artifacts:
    when: always
    paths:
      - testSecurity_report.txt
  allow_failure: false

  rules:
  - if: $CI_PIPELINE_SOURCE == "web"  
  - if: $CI_MERGE_REQUEST_IID
  - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

  variables:
    SEMGREP_APP_TOKEN: $SEMGREP_APP_TOKEN
  
frontend-css:
    stage: frontend-lint
    tags: 
        - docker
    image: node
    script:
        - npx csslint-cli frontend/src/*.css > lintcss_report.txt
    artifacts:
        when: always
        paths:
        - lintcss_report.txt
    allow_failure: false

frontend-cypress:
  stage: frontend-test
  tags:
    - docker
  image: cypress/base:16.18.1
  script:
    - cd backend
    - npm i
    - npm run updatedb
    - npm run startdev &
    - cd ../frontend
    - npm i
    - npm run dev &
    - npx cypress run > ../cypress.txt
  artifacts:
        when: always
        paths:
        - cypress.txt
  allow_failure: false

badges:
  stage: deploy
  image: python:3.9
  script:
      - pip install anybadge
      - ./generateBadges.sh # script to generate gitlab ci badges
  dependencies:
      - lint-js
      - frontend-css
  artifacts:
      paths:
          - lintes.svg
          - lintcss.svg
  when: always

scalingo:
  stage: deploy
  tags:
    - docker
  variables:
    SCALINGO_APP_NAME: wtspweb
    SCALINGO_REGION: osc-fr1
    GIT_DEPTH: 0
    PROJECT_DIR: backend
  image: ruby:3.1.3
  script:
    # Install scalingo CLI
    - curl -O https://cli-dl.scalingo.com/install && bash install
    - scalingo --app=$SCALINGO_APP_NAME env-set PROJECT_DIR=$PROJECT_DIR 
    - scalingo login --api-token $SCALINGO_API_TOKEN
    - mkdir -p ~/.dpl
    - ssh-keygen -t rsa -N "" -C $HOSTNAME -f ~/.dpl/id_rsa
    - scalingo keys-remove dpl_tmp_key || echo "On la supprime au préalable au cas où elle aurait déjà été ajoutée"
    - scalingo keys-add dpl_tmp_key ~/.dpl/id_rsa.pub
    - scalingo --app $SCALINGO_APP_NAME git-setup --remote scalingo-dpl --force
    - curl https://raw.githubusercontent.com/creationix/nvm/master/install.sh | bash # Install nvm
    - export NVM_DIR="$HOME/.nvm"
    - \. "$NVM_DIR/nvm.sh"  
    - \. "$NVM_DIR/bash_completion"
    - nvm install node
    - nvm use node
    - cd frontend
    - sed -i 's#http://localhost:3000#https://wtspweb.osc-fr1.scalingo.io#g' src/App.jsx # here we change the adress of backend
    - sed -i 's#ws://localhost:3000#wss://wtspweb.osc-fr1.scalingo.io#g' src/App.jsx # here we change the adress of backend
    - npm i && npm run build && cp -rf dist/* ../backend/src/frontend
    - git config --global user.email "$GITLAB_USER_EMAIL"
    - git config --global user.name "$GITLAB_USER_NAME"
    - cd ../backend/src/frontend && git add . && git commit -m "MAJ frontend"
    - "GIT_SSH_COMMAND='ssh -o StrictHostKeyChecking=no -i ~/.dpl/id_rsa' git push scalingo-dpl HEAD:refs/heads/main -f"
    - scalingo keys-remove dpl_tmp_key || echo Suppression
